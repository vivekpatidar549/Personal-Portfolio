{"version":3,"file":"static/js/8960.560af951.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-external-bubble/browser/Utils.js","../node_modules/@tsparticles/interaction-external-bubble/browser/Bubbler.js"],"sourcesContent":["import { clamp } from \"@tsparticles/engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, millisecondsToSeconds, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"@tsparticles/engine\";\nimport { Bubble } from \"./Options/Classes/Bubble.js\";\nimport { calculateBubbleValue } from \"./Utils.js\";\nconst bubbleMode = \"bubble\", minDistance = 0, defaultClickTime = 0, double = 2, defaultOpacity = 1, ratioOffset = 1, defaultBubbleValue = 0, minRatio = 0, half = 0.5, defaultRatio = 1;\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime ?? defaultClickTime)) /\n                    millisecondsToSeconds;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * double) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: \"size\",\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? defaultOpacity,\n                    },\n                    type: \"opacity\",\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance || !mousePos) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = ratioOffset - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= minRatio && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, ratioOffset - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? defaultOpacity, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value ?? defaultBubbleValue, type = data.type;\n            if (!bubbleDistance || bubbleDistance < minDistance || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === \"size\") {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === \"opacity\") {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, defaultRatio, divBubble);\n                    this._hoverBubbleOpacity(particle, defaultRatio, divBubble);\n                    this._hoverBubbleColor(particle, defaultRatio, divBubble);\n                }\n            });\n        };\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== bubbleMode) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(bubbleMode, hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(bubbleMode, clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(bubbleMode, divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(bubbleMode, onDiv);\n        if (!(divBubble || (onHover.enable && !!mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(bubbleMode, onHover.mode) || isInArray(bubbleMode, onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n"],"names":["calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","clamp","bubbleMode","Bubbler","container","_clickBubble","options","actualOptions","mouseClickPos","interactivity","mouse","clickPosition","bubbleOptions","modes","bubble","distance","retina","bubbleModeDistance","query","particles","quadTree","queryCircle","p","isEnabled","particle","clicking","inRange","durationEnd","pos","getPosition","distMouse","getDistance","timeSpent","Date","getTime","clickTime","millisecondsToSeconds","duration","sizeData","bubbleObj","optValue","bubbleModeSize","radius","particlesObj","getRangeMax","size","pixelRatio","type","_process","opacityData","opacity","_hoverBubbleColor","color","_hoverBubble","mousePos","position","pointDistance","status","mouseMoveEvent","_hoverBubbleSize","_hoverBubbleOpacity","reset","mouseLeaveEvent","divBubble","finalColor","modeColor","bubbleColor","itemFromSingleOrMultiple","rangeColorToHsl","mix","undefined","pColor","getFillColor","rgbToHsl","colorMix","modeOpacity","optOpacity","modeSize","optSize","data","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","_singleSelectorHover","delta","selector","div","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","Circle","Rectangle","contains","divs","divMode","clear","handleClickMode","mode","force","this","events","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","onDiv","isInArray","divModeExecute","isDivModeEnabled","Bubble","sources","source","load","ExternalInteractorBase"],"sourceRoot":""}