{"version":3,"file":"static/js/5666.65a65012.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/interaction-particles-links/browser/Utils.js","../node_modules/@tsparticles/interaction-particles-links/browser/LinkInstance.js"],"sourcesContent":["import { drawLine, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"@tsparticles/engine\";\nexport function drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n}\nexport function drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\nexport function getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n","import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils.js\";\nconst minOpacity = 0, minWidth = 0, minDistance = 0, half = 0.5, maxFrequency = 1;\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw((ctx) => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? minWidth, maxDistance = p1.retina.linksDistance ?? minDistance, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) * half;\n            if (opacityTriangle <= minOpacity) {\n                return;\n            }\n            container.canvas.draw((ctx) => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? minDistance;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter((t) => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination), minCount = 0;\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex((l) => l.destination === t.destination) >= minCount);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links?.length) {\n            return;\n        }\n        const p1Links = links.filter((l) => options.links &&\n            (options.links.frequency >= maxFrequency ||\n                this._getLinkFrequency(particle, l.destination) <= options.links.frequency));\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > minOpacity && (particle.retina.linksWidth ?? minWidth) > minWidth) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n        await Promise.resolve();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n"],"names":["setLinkFrequency","particles","dictionary","ids","key","map","t","id","sort","a","b","join","res","get","undefined","getRandom","set","LinkInstance","container","this","_drawLinkLine","p1","link","p1LinksOptions","options","links","enable","actualOptions","p2","destination","pos1","getPosition","pos2","opacity","canvas","draw","ctx","colorLine","twinkle","lines","twinkleFreq","frequency","twinkleRgb","rangeColorToRgb","color","getRangeValue","linkColor","linksColors","linksColor","getLinkColor","width","retina","linksWidth","maxDistance","linksDistance","backgroundMask","params","drawn","begin","end","context","canvasSize","getDistance","drawLine","warp","pi1","pi2","endNE","x","y","d1","getDistances","distance","yi","dy","dx","endSW","height","d2","xi","endSE","d3","lineWidth","globalCompositeOperation","composite","strokeStyle","getStyleFromRgb","shadow","shadowColor","shadowBlur","blur","stroke","drawLinkLine","size","_drawLinkTriangle","link1","link2","linksOptions","triangleOptions","triangles","p3","opacityTriangle","pos3","colorTriangle","beginPath","moveTo","lineTo","closePath","drawTriangle","fillStyle","fill","drawLinkTriangle","_drawTriangles","p1Links","vertices","filter","linkFreq","_getLinkFrequency","findIndex","l","length","vertex","_getTriangleFrequency","_freqs","Map","particle","Promise","resolve","ratio","pixelRatio"],"sourceRoot":""}